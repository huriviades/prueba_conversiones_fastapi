pipeline {
    agent any

    stages {
        stage('Actualizar el sistema') {
            steps {
                script {
                    sh '''
                    apt update -y
                    '''
                }
            }
        }

        stage('Corregir dpkg') {
            steps {
                script {
                    sh '''
                    dpkg --configure -a
                    '''
                }
            }
        }

        stage('Verificar si el folder existe') {
            steps {
                script {
                    def folderExists = sh(script: '[ -d /opt/demo_api/ ] && echo "exists" || echo "not exists"', returnStdout: true).trim()
                    echo "Folder /opt/demo_api/: ${folderExists}"

                    if (folderExists == 'exists') {
                        echo "El folder /opt/demo_api/ existe. Terminando pipeline."
                        currentBuild.result = 'SUCCESS' // Establece el resultado como éxito
                        return // Sale del pipeline sin marcar como error
                    } else {
                        echo "El folder /opt/demo_api/ no existe. Continuando con el pipeline."
                    }
                }
            }
        }

        stage('Instalar dependencias') {
            steps {
                script {
                    sh '''
                    apt install nano git curl -y
                    apt install build-essential libssl-dev libffi-dev python3-pip python3-dev python3-venv -y
                    apt install python3-pip python3-cffi python3-brotli -y
                    apt install libpango-1.0-0 libharfbuzz0b libpangoft2-1.0-0 -y
                    '''
                }
            }
        }

        stage('Configurar entorno virtual y instalar paquetes de Python') {
            steps {
                script {
                    sh '''
                    mkdir -p /opt/demo_api/workspace/envs
                    python3 -m venv /opt/demo_api/workspace/envs/demo_api
                    . /opt/demo_api/workspace/envs/demo_api/bin/activate
                    pip install --upgrade pip
                    pip install fastapi uvicorn psycopg2-binary gunicorn sqlalchemy
                    deactivate
                    '''
                }
            }
        }

        stage('Clonar/Actualizar repositorio') {
            steps {
                script {
                    sh '''
                    mkdir -p /opt/demo_api/testing
                    cd /opt/demo_api/testing
                    git clone https://github.com/huriviades/prueba_conversiones_fastapi.git .
                    git checkout postgresql-dev
                    '''
                }
            }
        }

        stage('Generar archivo de configuración de Supervisor') {
            steps {
                script {
                    sh '''
                    cat <<EOF | tee /etc/supervisor/conf.d/demo_api.conf
[program:demo_api]
command=/opt/demo_api/workspace/envs/demo_api/bin/gunicorn --bind 0.0.0.0:80 -w 2 -k uvicorn.workers.UvicornWorker main:app
directory=/opt/demo_api/testing/demo_api
autostart=true
autorestart=true
stderr_logfile=/var/log/demo_api.err.log
stdout_logfile=/var/log/demo_api.out.log
EOF
                    '''
                }
            }
        }

        stage('Verificar el estado de la API con el Supervisor') {
            steps {
                script {
                    sh '''
                    supervisorctl reread
                    supervisorctl update
                    supervisorctl status demo_api
                    '''
                }
            }
        }

        stage('Verificar la aplicación') {
            steps {
                script {
                    def response = sh(script: 'curl -Is http://localhost/docs | head -n 1', returnStdout: true).trim()
                    echo "Response: ${response}"

                    if (!response.contains('HTTP/1.1 200 OK')) {
                        error('La aplicación no está funcionando correctamente. Respuesta: ' + response)
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completado.'
        }
        success {
            echo 'Pipeline exitoso.'
        }
        failure {
            echo 'El pipeline ha fallado.'
        }
    }
}

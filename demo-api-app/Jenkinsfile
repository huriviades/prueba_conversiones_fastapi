pipeline {
    agent any

    stages {
        stage('Actualizar el sistema') {
            steps {
                script {
                    // Actualizar el sistema
                    sh '''
                    apt update -y
                    '''
                }
            }
        }

        stage('Corregir dpkg') {
            steps {
                script {
                    // Corregir dpkg
                    sh '''
                    dpkg --configure -a
                    '''
                }
            }
        }

        stage('Instalar dependencias') {
            steps {
                script {
                    // Instalar herramientas y dependencias
                    sh '''
                    apt install nano git curl -y
                    apt install build-essential libssl-dev libffi-dev python3-pip python3-dev python3-venv -y
                    apt install python3-pip python3-cffi python3-brotli -y
                    apt install libpango-1.0-0 libharfbuzz0b libpangoft2-1.0-0 -y
                    '''
                }
            }
        }

        stage('Configurar entorno virtual y instalar paquetes de Python') {
            steps {
                script {
                    // Crear el entorno virtual y activar
                    sh '''
                    mkdir -p /opt/demo_api/workspace/envs
                    python3 -m venv /opt/demo_api/workspace/envs/demo_api
                    . /opt/demo_api/workspace/envs/demo_api/bin/activate

                    # Instalar dependencias de Python
                    pip install --upgrade pip
                    pip install fastapi uvicorn psycopg2-binary gunicorn sqlalchemy
                    deactivate
                    '''
                }
            }
        }

        stage('Clonar/Actualizar repositorio') {
            steps {
                script {
                    // Verificar si existe el directorio
                    def dir = '/opt/demo_api/testing'
                    if (fileExists(dir)) {
                        // Si existe, cambiar al directorio y hacer pull
                        sh """
                            cd ${dir}
                            git pull origin postgresql-dev
                            git checkout postgresql-dev
                        """
                    } else {
                        // Si no existe, crear el directorio, clonar el repositorio y hacer checkout
                        sh """
                            mkdir -p ${dir}
                            cd ${dir}
                            git clone https://github.com/huriviades/prueba_conversiones_fastapi.git .
                            git checkout postgresql-dev
                        """
                    }
                }
            }
        }

        stage('Ejecutar la aplicación') {
            steps {
                script {
                    // Ejecutar la aplicación con Gunicorn dentro del entorno virtual
                    sh '''
                    . /opt/demo_api/workspace/envs/demo_api/bin/activate
                    cd /opt/demo_api/testing/demo_api
                    gunicorn --bind 0.0.0.0:80 -w 2 -k uvicorn.workers.UvicornWorker main:app > gunicorn.log 2>&1 &
                    sleep 5  # Espera de 5 segundos
                    '''
                }
            }
        }

        stage('Verificar la aplicación') {
            steps {
                script {
                    // Verificar si la aplicación está corriendo y validar respuesta HTTP - Prueba Unitaria Basica (usar jmeter para QoS)
                    def response = sh(script: 'curl -Is http://localhost/docs | head -n 1', returnStdout: true).trim()
                    echo "Response: ${response}"

                    /** // Comprobar si la respuesta es HTTP/1.1 200 OK
                    if (!response.contains('HTTP/1.1 200 OK')) {
                        error('La aplicación no está funcionando correctamente. Respuesta: ' + response)
                    } **/
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completado.'
        }
        success {
            echo 'Pipeline exitoso.'
        }
        failure {
            echo 'El pipeline ha fallado.'
        }
    }
}
